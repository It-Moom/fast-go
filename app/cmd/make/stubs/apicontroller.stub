package v1

import (
    "fast-go/app/handler/http_response"
    "fast-go/app/http/controller/api"
    httpreq "fast-go/app/http/request"
    "fast-go/app/model/entity/{{PackageName}}"
    "fast-go/app/policy"

    "github.com/gin-gonic/gin"
)

// {{StructName}}Controller {{StructName}}控制器
type {{StructName}}Controller struct {
    api.BaseAPIController
}

// ListAll 获取{{StructName}}列表数据
func (ctrl *{{StructName}}Controller) ListAll(c *gin.Context) {
    {{VariableNamePlural}} := {{PackageName}}.All()
    http_response.RequestSuccess(c, {{VariableNamePlural}})
}

// ShowOne 获取{{StructName}}详情数据
func (ctrl *{{StructName}}Controller) ShowOne(c *gin.Context) {
    {{VariableName}}Entity := {{PackageName}}.FindById(c.Param("id"))
    if {{VariableName}}Entity.ID == 0 {
        http_response.QueryVoid(c, "{{StructName}}不存在")
        return
    }
    http_response.RequestSuccess(c, {{VariableName}}Entity)
}

// Store 创建{{StructName}}数据
func (ctrl *{{StructName}}Controller) Store(c *gin.Context) {

    request := httpreq.{{StructName}}Request{}
    if ok := httpreq.Validate(c, &request, httpreq.{{StructName}}Save); !ok {
        return
    }

    {{VariableName}}Entity := {{PackageName}}.{{StructName}}{
        FieldName:      request.FieldName,
    }
    {{VariableName}}Entity.Create()
    if {{VariableName}}Entity.ID > 0 {
        http_response.RequestSuccess(c, {{VariableName}}Entity)
    } else {
        http_response.RequestError(c, "创建{{StructName}}失败")
    }
}

// Update 更新{{StructName}}数据
func (ctrl *{{StructName}}Controller) Update(c *gin.Context) {

    {{VariableName}}Entity := {{PackageName}}.FindById(c.Param("id"))
    if {{VariableName}}Entity.ID == 0 {
        http_response.QueryVoid(c, "{{StructName}}不存在")
        return
    }

    if ok := policy.CanModify{{StructName}}(c, {{VariableName}}Entity); !ok {
        http_response.PermissionDeny(c, "无权修改{{StructName}}")
        return
    }

    request := httpreq.{{StructName}}Request{}
    bindOk, errs := httpreq.Validate(c, &request, httpreq.{{StructName}}Save)
    if !bindOk {
        return
    }
    if len(errs) > 0 {
        http_response.ParamError(c, errs)
        return
    }

    {{VariableName}}Entity.FieldName = request.FieldName
    rowsAffected := {{VariableName}}Entity.Save()
    if rowsAffected > 0 {
        http_response.RequestSuccess(c, {{VariableName}}Entity)
    } else {
        http_response.RequestError(c, "修改{{StructName}}失败")

	}
}

// Delete 删除{{StructName}}数据
func (ctrl *{{StructName}}Controller) Delete(c *gin.Context) {

    {{VariableName}}Entity := {{PackageName}}.FindById(c.Param("id"))
    if {{VariableName}}Entity.ID == 0 {
		http_response.QueryVoid(c, "{{StructName}}不存在")
        return
    }

    if ok := policy.CanModify{{StructName}}(c, {{VariableName}}Entity); !ok {
        http_response.PermissionDeny(c, "无权修改{{StructName}}")
        return
    }

    rowsAffected := {{VariableName}}Entity.Delete()
    if rowsAffected > 0 {
        http_response.RequestSuccess(c, "删除{{StructName}}成功")
        return
    }
    http_response.RequestError(c, "删除{{StructName}}失败")
}